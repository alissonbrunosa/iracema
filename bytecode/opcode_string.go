// Code generated by "stringer -type=Opcode -linecomment"; DO NOT EDIT.

package bytecode

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Pop-1]
	_ = x[Push-2]
	_ = x[Throw-3]
	_ = x[UnaryNot-4]
	_ = x[UnaryAdd-5]
	_ = x[UnarySub-6]
	_ = x[Binary-7]
	_ = x[Return-8]
	_ = x[PushNone-9]
	_ = x[SetAttr-10]
	_ = x[GetAttr-11]
	_ = x[PushSelf-12]
	_ = x[SetLocal-13]
	_ = x[GetLocal-14]
	_ = x[MatchType-15]
	_ = x[BuildArray-16]
	_ = x[CallMethod-17]
	_ = x[SetConstant-18]
	_ = x[GetConstant-19]
	_ = x[DefineObject-20]
	_ = x[DefineFunction-21]
	_ = x[Jump-22]
	_ = x[JumpIfFalse-23]
	_ = x[Iterate-24]
	_ = x[NewIterator-25]
}

const _Opcode_name = "POPPUSHTHROWUNARY_NOTUNARY_ADDUNARY_SUBBINARYRETURNPUSH_NONESET_ATTRGET_ATTRPUSH_SELFSET_LOCALGET_LOCALMATCH_TYPEBUILD_ARRAYCALL_METHODSET_CONSTANTGET_CONSTANTDEFINE_OBJECTDEFINE_FUNCTIONJUMPJUMP_IF_FALSEITERATENEWITERATOR"

var _Opcode_index = [...]uint8{0, 3, 7, 12, 21, 30, 39, 45, 51, 60, 68, 76, 85, 94, 103, 113, 124, 135, 147, 159, 172, 187, 191, 204, 211, 222}

func (i Opcode) String() string {
	i -= 1
	if i >= Opcode(len(_Opcode_index)-1) {
		return "Opcode(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _Opcode_name[_Opcode_index[i]:_Opcode_index[i+1]]
}
