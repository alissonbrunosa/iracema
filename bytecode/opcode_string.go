// Code generated by "stringer -type=Opcode -linecomment"; DO NOT EDIT.

package bytecode

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Nop-0]
	_ = x[Pop-1]
	_ = x[Push-2]
	_ = x[Throw-3]
	_ = x[Return-4]
	_ = x[PushNone-5]
	_ = x[SetAttr-6]
	_ = x[GetAttr-7]
	_ = x[PushThis-8]
	_ = x[SetLocal-9]
	_ = x[GetLocal-10]
	_ = x[MatchType-11]
	_ = x[BuildArray-12]
	_ = x[BuildHash-13]
	_ = x[CallMethod-14]
	_ = x[CallSuper-15]
	_ = x[SetConstant-16]
	_ = x[GetConstant-17]
	_ = x[DefineObject-18]
	_ = x[DefineFunction-19]
	_ = x[Jump-20]
	_ = x[JumpIfFalse-21]
	_ = x[JumpIfTrue-22]
	_ = x[Iterate-23]
	_ = x[NewIterator-24]
	_ = x[LoadFile-25]
	_ = x[WithCatch-26]
}

const _Opcode_name = "NOPPOPPUSHTHROWRETURNPUSH_NONESET_ATTRGET_ATTRPUSH_THISSET_LOCALGET_LOCALMATCH_TYPEBUILD_ARRAYBUILD_HASHCALL_METHODCALL_SUPERSET_CONSTANTGET_CONSTANTDEFINE_OBJECTDEFINE_FUNCTIONJUMPJUMP_IF_FALSEJUMP_IF_TRUEITERATENEWITERATORLOAD_FILEWITH_CATCH"

var _Opcode_index = [...]uint8{0, 3, 6, 10, 15, 21, 30, 38, 46, 55, 64, 73, 83, 94, 104, 115, 125, 137, 149, 162, 177, 181, 194, 206, 213, 224, 233, 243}

func (i Opcode) String() string {
	if i >= Opcode(len(_Opcode_index)-1) {
		return "Opcode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Opcode_name[_Opcode_index[i]:_Opcode_index[i+1]]
}
